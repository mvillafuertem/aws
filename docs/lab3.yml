AWSTemplateFormatVersion: 2010-09-09

Description: 'A lab that creates an S3 bucket and a Dynamo DB table for web app configuration'

Parameters:
  AmazonLinuxAMIID:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  SampleAppUrl:
    Type: String
    Default: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-100-TECESS-5/app/app.zip

  SamplePhotosUrl:
    Type: String
    Default: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-100-TECESS-5/app/sample-photos.zip


Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Named
          Value: Lab IGW

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTable:
    DependsOn: PublicSubnet1
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    DependsOn: PublicRoute
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    DependsOn: PublicRoute
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  EC2WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EmployeeDirectoryAppRole
      Path: "/"
      Roles:
        - Ref: EC2WebInstanceRole

  EC2WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EmployeeDirectoryAppRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: DirectoryWebApplicationSSHPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2-instance-connect:SendSSHPublicKey
                Resource:
                  - arn:aws:ec2:*:*:instance/*
                Condition:
                  StringEquals:
                    ec2:osuser: ec2-user
        - PolicyName: DirectoryWebApplicationDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource:
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource:
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Employees

  WebInstance:
    DependsOn: PublicSubnet1RouteTableAssociation
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref EC2WebInstanceProfile
      ImageId: !Ref AmazonLinuxAMIID
      InstanceType: t3.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref WebSecurityGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: Web Application
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -ex
          # Update yum
          yum -y update
          # Add node's source repo
          curl -sL https://rpm.nodesource.com/setup_15.x | bash -
          #Install nodejs
          yum -y install nodejs
          # Create a dedicated directory for the application
          mkdir -p /var/app
          # Get the app from s3
          wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-100-TECESS-5/app/app.zip
          # Unzip it into a your desired folder
          unzip app.zip -d /var/app/
          cd /var/app/          
          # Configure Admin Tools
          export SHOW_ADMIN_TOOLS=0
          # Configure S3 bucket details
          export PHOTOS_BUCKET=YOUR-S3-BUCKET-NAME
          # Configure default AWS Region
          export DEFAULT_AWS_REGION=${AWS::Region}
          # Install dependencies
          npm install
          # Start your app
          npm start

  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access
      GroupName: Web Security Group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Web Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # This is not necessary in AWS Labs, as the access in that platform is role-based
  # - awsstudent doesn't exist in AWS Labs

Outputs:
  PublicWebApplicationURL:
    Description: Web Application Public URL
    Value:
      Fn::Join:
        - ''
        -   - http://
            - Fn::GetAtt:
                - WebInstance
                - PublicDnsName
            - '#/images'
  PhotosZipURL:
    Description: Photos Zip File URL
    Value: !Ref SamplePhotosUrl

  LabRegion:
    Description: Lab Region
    Value: !Ref AWS::Region

  AWSAccountId:
    Description: AWS Account Id
    Value: !Ref AWS::AccountId